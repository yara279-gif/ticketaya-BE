[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "renderers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "renderers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "renderers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "renderers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "TokenError",
        "importPath": "tokenize",
        "description": "tokenize",
        "isExtraImport": true,
        "detail": "tokenize",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "validate_password",
        "importPath": "django.contrib.auth.password_validation",
        "description": "django.contrib.auth.password_validation",
        "isExtraImport": true,
        "detail": "django.contrib.auth.password_validation",
        "documentation": {}
    },
    {
        "label": "smart_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_bytes",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "DjangoUnicodeDecodeError",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "smart_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_bytes",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "DjangoUnicodeDecodeError",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_decode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_encode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_decode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_encode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "PasswordResetTokenGenerator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "search",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "EmailMessage",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "EmailMessage",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "EmailMessage",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "server",
        "importPath": "http",
        "description": "http",
        "isExtraImport": true,
        "detail": "http",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "Util",
        "importPath": "account.utils",
        "description": "account.utils",
        "isExtraImport": true,
        "detail": "account.utils",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticatedOrReadOnly",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdminUser",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "DjangoModelPermissions",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "DjangoModelPermissionsOrAnonReadOnly",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "isExtraImport": true,
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "account.models",
        "description": "account.models",
        "isExtraImport": true,
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "account.models",
        "description": "account.models",
        "isExtraImport": true,
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "account.models",
        "description": "account.models",
        "isExtraImport": true,
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "account.models",
        "description": "account.models",
        "isExtraImport": true,
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "account.models",
        "description": "account.models",
        "isExtraImport": true,
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "JWTAuthentication",
        "importPath": "rest_framework_simplejwt.authentication",
        "description": "rest_framework_simplejwt.authentication",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.authentication",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "Match",
        "importPath": "match .models",
        "description": "match .models",
        "isExtraImport": true,
        "detail": "match .models",
        "documentation": {}
    },
    {
        "label": "Match",
        "importPath": "match.models",
        "description": "match.models",
        "isExtraImport": true,
        "detail": "match.models",
        "documentation": {}
    },
    {
        "label": "update_match",
        "importPath": "match.views",
        "description": "match.views",
        "isExtraImport": true,
        "detail": "match.views",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenBlacklistView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0001_initial",
        "description": "account.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = []\n    operations = [\n        migrations.CreateModel(\n            name=\"User\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(",
        "detail": "account.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0002_alter_user_is_admin",
        "description": "account.migrations.0002_alter_user_is_admin",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('account', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='is_admin',\n            field=models.BooleanField(blank=True, default=False),\n        ),",
        "detail": "account.migrations.0002_alter_user_is_admin",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0002_match",
        "description": "account.migrations.0002_match",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"account\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"Match\",\n            fields=[\n                (\n                    \"id\",",
        "detail": "account.migrations.0002_match",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0002_user_image",
        "description": "account.migrations.0002_user_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('account', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='image',\n            field=models.ImageField(default='static\\x07dmin\\\\img\\\\download.png', upload_to='images/%y/%m/%d'),\n        ),",
        "detail": "account.migrations.0002_user_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0003_alter_user_image",
        "description": "account.migrations.0003_alter_user_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('account', '0002_user_image'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='image',\n            field=models.ImageField(default='static/admin/img/download.png', upload_to='images/%y/%m/%d'),\n        ),",
        "detail": "account.migrations.0003_alter_user_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0003_alter_user_is_admin",
        "description": "account.migrations.0003_alter_user_is_admin",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('account', '0002_alter_user_is_admin'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='is_admin',\n            field=models.BooleanField(blank=True, default=False, null=True),\n        ),",
        "detail": "account.migrations.0003_alter_user_is_admin",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0003_delete_match",
        "description": "account.migrations.0003_delete_match",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"account\", \"0002_match\"),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name=\"Match\",\n        ),\n    ]",
        "detail": "account.migrations.0003_delete_match",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0004_alter_user_image",
        "description": "account.migrations.0004_alter_user_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('account', '0003_alter_user_image'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='image',\n            field=models.ImageField(default='admin/img/download.png', upload_to='images/%y/%m/%d'),\n        ),",
        "detail": "account.migrations.0004_alter_user_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0004_user_image",
        "description": "account.migrations.0004_user_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"account\", \"0003_delete_match\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"user\",\n            name=\"image\",\n            field=models.ImageField(\n                default=\"images/24/9/12/profile.png\", upload_to=\"images/%y/%m/%d\"",
        "detail": "account.migrations.0004_user_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0005_alter_user_image",
        "description": "account.migrations.0005_alter_user_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('account', '0004_alter_user_image'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='image',\n            field=models.ImageField(default='download.png', upload_to='images/%y/%m/%d'),\n        ),",
        "detail": "account.migrations.0005_alter_user_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0006_alter_user_image",
        "description": "account.migrations.0006_alter_user_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('account', '0005_alter_user_image'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='image',\n            field=models.ImageField(default='download.jpg', upload_to='images/%y/%m/%d'),\n        ),",
        "detail": "account.migrations.0006_alter_user_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0007_alter_user_image",
        "description": "account.migrations.0007_alter_user_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('account', '0006_alter_user_image'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='image',\n            field=models.ImageField(default='admin/img/download.jpg', upload_to='images/%y/%m/%d'),\n        ),",
        "detail": "account.migrations.0007_alter_user_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0008_alter_user_image",
        "description": "account.migrations.0008_alter_user_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('account', '0007_alter_user_image'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='image',\n            field=models.ImageField(default='images/24/9/12/download.jpg', upload_to='images/%y/%m/%d'),\n        ),",
        "detail": "account.migrations.0008_alter_user_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0009_alter_user_image",
        "description": "account.migrations.0009_alter_user_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('account', '0008_alter_user_image'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='image',\n            field=models.ImageField(default='images/24/9/12/profile.png', upload_to='images/%y/%m/%d'),\n        ),",
        "detail": "account.migrations.0009_alter_user_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0010_merge_0004_user_image_0009_alter_user_image",
        "description": "account.migrations.0010_merge_0004_user_image_0009_alter_user_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"account\", \"0004_user_image\"),\n        (\"account\", \"0009_alter_user_image\"),\n    ]\n    operations = []",
        "detail": "account.migrations.0010_merge_0004_user_image_0009_alter_user_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0011_merge_20240916_2234",
        "description": "account.migrations.0011_merge_20240916_2234",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"account\", \"0003_alter_user_is_admin\"),\n        (\"account\", \"0010_merge_0004_user_image_0009_alter_user_image\"),\n    ]\n    operations = []",
        "detail": "account.migrations.0011_merge_20240916_2234",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "account.admin",
        "description": "account.admin",
        "peekOfCode": "class UserAdmin(BaseUserAdmin):\n    # The forms to add and change user instances\n    # The fields to be used in displaying the User model.\n    # These override the definitions on the base UserAdmin\n    # that reference specific fields on auth.User.\n    list_display = [\"email\",\"username\", \"first_name\",\"last_name\", \"is_admin\",\"image\"]\n    list_filter = [\"is_admin\"]\n    fieldsets = [\n        (None, {\"fields\": [\"email\", \"password\"]}),\n        (\"Personal info\", {\"fields\": [\"username\",\"first_name\",\"last_name\",\"image\"]}),",
        "detail": "account.admin",
        "documentation": {}
    },
    {
        "label": "AccountConfig",
        "kind": 6,
        "importPath": "account.apps",
        "description": "account.apps",
        "peekOfCode": "class AccountConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"account\"",
        "detail": "account.apps",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "account.models",
        "description": "account.models",
        "peekOfCode": "class UserManager(BaseUserManager):\n    def create_user(\n        self, email, username, first_name, last_name, password=None, password2=None\n    ):\n        \"\"\"\n        Creates and saves a User with the given email, date of\n        birth and password.\n        \"\"\"\n        if not email:\n            raise ValueError(\"Users must have an email address\")",
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "account.models",
        "description": "account.models",
        "peekOfCode": "class User(AbstractBaseUser):\n    email = models.EmailField(\n        verbose_name=\"Email\",\n        max_length=255,\n        unique=True,\n    )\n    username = models.CharField(max_length=255, unique=True)\n    first_name = models.CharField(max_length=255)\n    last_name = models.CharField(max_length=255)\n    image = models.ImageField(upload_to='images/%y/%m/%d',default='images/24/9/12/profile.png')",
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "IsAuthOrReadOnly",
        "kind": 6,
        "importPath": "account.permissions",
        "description": "account.permissions",
        "peekOfCode": "class IsAuthOrReadOnly(permissions.BasePermission):\n    def has_permission(self, request, view, obj):\n        if request.method in permissions.SAFE_METHODS:\n            return True\n        return obj.username == request.user",
        "detail": "account.permissions",
        "documentation": {}
    },
    {
        "label": "userrenderer",
        "kind": 6,
        "importPath": "account.renderers",
        "description": "account.renderers",
        "peekOfCode": "class userrenderer(renderers.JSONRenderer):\n    charset = \"utf-8\"\n    def render(self, data, accepted_media_type=None, renderer_context=None):\n        response = \"\"\n        if \"ErrorDetail\" in str(data):\n            response = json.dumps({\"errors\": data})\n        else:\n            response = json.dumps(data)\n        return response",
        "detail": "account.renderers",
        "documentation": {}
    },
    {
        "label": "userRegisterSerializer",
        "kind": 6,
        "importPath": "account.serializers",
        "description": "account.serializers",
        "peekOfCode": "class userRegisterSerializer(serializers.ModelSerializer):\n    password2 = serializers.CharField(style ={'input_type':'password'})\n    class Meta :\n        model = User\n        fields = ['email','username','first_name','last_name','password','password2']\n        extra_kwargs = {\n            'password':{'write_only':True}\n        }\n    def validate(self, attrs):\n        if attrs['password'] != attrs['password2']:",
        "detail": "account.serializers",
        "documentation": {}
    },
    {
        "label": "userLoginSerializer",
        "kind": 6,
        "importPath": "account.serializers",
        "description": "account.serializers",
        "peekOfCode": "class userLoginSerializer(serializers.ModelSerializer):\n    username = serializers.CharField(max_length=255)\n    class Meta:\n        model = User\n        fields = [\"username\", \"password\", \"is_admin\"]\n# ---------------------------------(user-profile)-------------------------------------\nclass userProfileSerializer (serializers.ModelSerializer):\n    class Meta :\n        model = User\n        fields = ['id','email','username','is_admin','first_name','last_name','image']",
        "detail": "account.serializers",
        "documentation": {}
    },
    {
        "label": "userProfileSerialize",
        "kind": 6,
        "importPath": "account.serializers",
        "description": "account.serializers",
        "peekOfCode": "class userProfileSerializer (serializers.ModelSerializer):\n    class Meta :\n        model = User\n        fields = ['id','email','username','is_admin','first_name','last_name','image']\n#---------------------------------(update)----------------------------------------------\nclass updateuserprofileserializer (serializers.ModelSerializer):\n    class Meta :\n        model = User\n        fields = ['email','username','first_name','last_name','image']\n# ---------------------------------(change-password)-------------------------------------",
        "detail": "account.serializers",
        "documentation": {}
    },
    {
        "label": "updateuserprofileserialize",
        "kind": 6,
        "importPath": "account.serializers",
        "description": "account.serializers",
        "peekOfCode": "class updateuserprofileserializer (serializers.ModelSerializer):\n    class Meta :\n        model = User\n        fields = ['email','username','first_name','last_name','image']\n# ---------------------------------(change-password)-------------------------------------\nclass ChangePasswordSerializer(serializers.ModelSerializer):\n    #make fields i want to enter it  in the form\n    old_password = serializers.CharField(style={'input_type': 'password'}, write_only=True)\n    new_password = serializers.CharField(style={'input_type': 'password'}, write_only=True)\n    confirm_password = serializers.CharField(style={'input_type': 'password'}, write_only=True)",
        "detail": "account.serializers",
        "documentation": {}
    },
    {
        "label": "ChangePasswordSerializer",
        "kind": 6,
        "importPath": "account.serializers",
        "description": "account.serializers",
        "peekOfCode": "class ChangePasswordSerializer(serializers.ModelSerializer):\n    #make fields i want to enter it  in the form\n    old_password = serializers.CharField(style={'input_type': 'password'}, write_only=True)\n    new_password = serializers.CharField(style={'input_type': 'password'}, write_only=True)\n    confirm_password = serializers.CharField(style={'input_type': 'password'}, write_only=True)\n    class Meta:\n        model = User\n        fields = [\n            \"email\",\n            \"username\",",
        "detail": "account.serializers",
        "documentation": {}
    },
    {
        "label": "userProfileSerializer",
        "kind": 6,
        "importPath": "account.serializers",
        "description": "account.serializers",
        "peekOfCode": "class userProfileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = [\"id\", \"email\", \"username\", \"is_admin\", \"first_name\", \"last_name\",\"image\"]\n# ---------------------------------(change-password)-------------------------------------\nclass ChangePasswordSerializer(serializers.ModelSerializer):\n    # make fields i want to enter it  in the form\n    old_password = serializers.CharField(\n        style={\"input_type\": \"password\"}, write_only=True\n    )",
        "detail": "account.serializers",
        "documentation": {}
    },
    {
        "label": "ChangePasswordSerializer",
        "kind": 6,
        "importPath": "account.serializers",
        "description": "account.serializers",
        "peekOfCode": "class ChangePasswordSerializer(serializers.ModelSerializer):\n    # make fields i want to enter it  in the form\n    old_password = serializers.CharField(\n        style={\"input_type\": \"password\"}, write_only=True\n    )\n    new_password = serializers.CharField(\n        style={\"input_type\": \"password\"}, write_only=True\n    )\n    confirm_password = serializers.CharField(\n        style={\"input_type\": \"password\"}, write_only=True",
        "detail": "account.serializers",
        "documentation": {}
    },
    {
        "label": "ResetPasswordEmailSerializer",
        "kind": 6,
        "importPath": "account.serializers",
        "description": "account.serializers",
        "peekOfCode": "class ResetPasswordEmailSerializer(serializers.ModelSerializer):\n    email = serializers.EmailField(max_length=255)\n    class Meta:\n        model = User\n        fields = [\"email\"]\n    def validate(self, attrs):\n        email = attrs.get(\"email\")\n        if not User.objects.filter(email=email).exists():\n            raise serializers.ValidationError({\"email\": \"User not found\"})\n        user = User.objects.get(email=email)",
        "detail": "account.serializers",
        "documentation": {}
    },
    {
        "label": "ResetPasswordSerializer",
        "kind": 6,
        "importPath": "account.serializers",
        "description": "account.serializers",
        "peekOfCode": "class ResetPasswordSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(style={\"input_type\": \"password\"}, write_only=True)\n    confirm_password = serializers.CharField(\n        style={\"input_type\": \"password\"}, write_only=True\n    )\n    class Meta:\n        model = User\n        fields = [\"password\", \"confirm_password\"]\n    def validate(self, attrs):\n        password = attrs.get(\"password\")",
        "detail": "account.serializers",
        "documentation": {}
    },
    {
        "label": "AdminSerializer",
        "kind": 6,
        "importPath": "account.serializers",
        "description": "account.serializers",
        "peekOfCode": "class AdminSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = [\n            \"id\",\n            \"username\",\n            \"first_name\",\n            \"last_name\",\n            \"is_admin\",\n            \"email\",",
        "detail": "account.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "account.serializers",
        "description": "account.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = [\n            \"id\",\n            \"username\",\n            \"first_name\",\n            \"last_name\",\n            \"is_admin\",\n            \"email\",",
        "detail": "account.serializers",
        "documentation": {}
    },
    {
        "label": "ListSerializer",
        "kind": 6,
        "importPath": "account.serializers",
        "description": "account.serializers",
        "peekOfCode": "class ListSerializer(serializers.ModelSerializer):\n    class Meta:\n        model=User\n        fields=['id','username','first_name','last_name','image','is_admin']\n# ---------------------------------------(delete_account)------------------------------------------------------------\n# class delete_account (serializers.ModelSerializer):\n#     class Meta :\n#         model = User\n#         fields = '__all__'\n# ---------------------------------------(logout)------------------------------------------------------------",
        "detail": "account.serializers",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "account.serializers",
        "description": "account.serializers",
        "peekOfCode": "user = User()\n# ---------------------------------(register)-------------------------------------\nclass userRegisterSerializer(serializers.ModelSerializer):\n    password2 = serializers.CharField(style ={'input_type':'password'})\n    class Meta :\n        model = User\n        fields = ['email','username','first_name','last_name','password','password2']\n        extra_kwargs = {\n            'password':{'write_only':True}\n        }",
        "detail": "account.serializers",
        "documentation": {}
    },
    {
        "label": "Util",
        "kind": 6,
        "importPath": "account.utils",
        "description": "account.utils",
        "peekOfCode": "class Util:\n    @staticmethod\n    def send_email(data):\n        email = EmailMessage(\n            subject=data[\"subject\"],\n            body=data[\"body\"],\n            from_email=settings.DEFAULT_FROM_EMAIL,  # Use directly from settings\n            to=[data[\"to_email\"]],\n        )\n        email.send(fail_silently=False)  # Set to False to raise exceptions on errors",
        "detail": "account.utils",
        "documentation": {}
    },
    {
        "label": "addadmin",
        "kind": 6,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "class addadmin(APIView):\n    renderer_class = [userrenderer]\n    permission_classes = [IsAuthenticated]\n    def post(self, request):\n        serializerr = userProfileSerializer(request.user)\n        if serializerr.data[\"is_admin\"] == False:\n            return Response({\"message\": \"Don't have access\"})\n        serializer = AdminSerializer(data=request.data)\n        if serializer.is_valid():\n            subject = \"NEW Admin\"",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "adduser",
        "kind": 6,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "class adduser(APIView):\n    renderer_class = [userrenderer]\n    permission_classes = [IsAuthenticated]\n    def post(self, request):\n        serializerr = userProfileSerializer(request.user)\n        if serializerr.data[\"is_admin\"] == False:\n            return Response({\"message\": \"Don't have access\"})\n        serializer = UserSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "retrieveeuser",
        "kind": 6,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "class retrieveeuser(APIView):\n    renderer_class = [userrenderer]\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        serializerr = userProfileSerializer(request.user)\n        if serializerr.data[\"is_admin\"] == False:\n            return Response({\"message\": \"Don't have access\"})\n        id = request.data[\"id\"]\n        user = User.objects.filter(id=id).first()\n        if not user is None:",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "searchuser",
        "kind": 6,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "class searchuser(APIView):\n    renderer_class = [userrenderer]\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        serializerr = userProfileSerializer(request.user)\n        if serializerr.data[\"is_admin\"] == False:\n            return Response({\"message\": \"Don't have access\"})\n        user = User.objects.filter(username__contains=request.data[\"username\"])\n        if user.exists():\n            serializer = UserSerializer(user, many=True)",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "deleteuser",
        "kind": 6,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "class deleteuser(APIView):\n    renderer_class = [userrenderer]\n    permission_classes = [IsAuthenticated]\n    def post(self, request):\n        serializerr = userProfileSerializer(request.user)\n        if serializerr.data[\"is_admin\"] == False:\n            return Response({\"message\": \"Don't have access\"})\n        user = User.objects.filter(username=request.data[\"username\"]).first()\n        if user:\n            user.delete()",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "updateuser",
        "kind": 6,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "class updateuser(APIView):\n    renderer_class = [userrenderer]\n    permission_classes = [IsAuthenticated]\n    def patch(self, request):\n        serializerr = userProfileSerializer(request.user)\n        if serializerr.data[\"is_admin\"] == False:\n            return Response({\"message\": \"Don't have access\"})\n        user = User.objects.filter(id=request.data[\"id\"]).first()\n        if user:\n            serializer=UserSerializer()",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "listusers",
        "kind": 6,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "class listusers(APIView):\n    renderer_class =  [userrenderer]\n    permission_classes = [IsAuthenticated]\n    def get(self,request):\n        serializerr=userProfileSerializer(request.user)\n        if serializerr.data['is_admin'] == False:\n                return Response({\"message\":\"Don't have access\"})\n        user=User.objects.all()\n        if not user:\n            return Response( {\"message\":\"There is no users\"})",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "get_tokens_for_user",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def get_tokens_for_user(user):\n    refresh = RefreshToken.for_user(user)\n    return {\n        \"refresh\": str(refresh),\n        \"access\": str(refresh.access_token),\n    }\n# ----------------------(register_view)-------------------------------------------------\n@api_view([\"POST\"])\ndef register(request):\n    if request.method == \"POST\":",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def register(request):\n    if request.method == \"POST\":\n        renderer_class = [userrenderer]\n        serializer = serializers.userRegisterSerializer(data=request.data)\n        if serializer.is_valid(raise_exception=True):\n            user = serializer.save()\n            token = get_tokens_for_user(user)\n            return Response(\n                {\"token\": token, \"msg\": \"register successfull\"},\n                status=status.HTTP_201_CREATED,",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def login(request):\n    if request.method == \"POST\":\n        renderer_class = [userrenderer]\n        serializer = serializers.userLoginSerializer(data=request.data)\n        if serializer.is_valid(raise_exception=True):\n            username = serializer.data.get(\"username\")\n            password = serializer.data.get(\"password\")\n            # usr = serializer.data.get('user')\n            user = authenticate(username=username, password=password)\n            if user is not None:",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "userprofile",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def userprofile(request):\n    if request.method == \"GET\":\n        renderer_class = [userrenderer]\n        permission_classes = [IsAuthOrReadOnly]\n        serializer = serializers.userProfileSerializer(request.user)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n# ----------------------(change_password_view)-------------------------------------------------\n@api_view([\"POST\"])\ndef change_password(request):\n    serializer = serializers.ChangePasswordSerializer(",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def change_password(request):\n    serializer = serializers.ChangePasswordSerializer(\n        data=request.data, context={\"request\": request}\n    )\n    if serializer.is_valid():\n        serializer.save()\n        return Response(\n            {\"msg\": \"Password changed successfully\"}, status=status.HTTP_200_OK\n        )\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "reset_password_email",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def reset_password_email(request):\n    renderer_classes = [userrenderer]\n    serializer = serializers.ResetPasswordEmailSerializer(data=request.data)\n    if serializer.is_valid(raise_exception=True):\n        return Response(\n            {\"msg\": \"password resert link was send .please check your email\"},\n            status=status.HTTP_200_OK,\n        )\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n# ----------------------------------------------------------------------------------",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "reset_password",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def reset_password(request, uid, token):\n    renderer_class = [userrenderer]\n    serializer = serializers.ResetPasswordSerializer(\n        data=request.data, context={\"uid\": uid, \"token\": token}\n    )\n    if serializer.is_valid(raise_exception=True):\n        return Response(\n            {\"msg\": \"Password has been reset successfully\"}, status=status.HTTP_200_OK\n        )\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "user_logout",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def user_logout(request):\n    renderer_class = [userrenderer]\n    permission_classes = [IsAuthenticated]\n    try:\n        refresh_token = request.data[\"refresh_token\"]\n        token = RefreshToken(refresh_token)\n        token.blacklist()\n        return Response({\"msg\": \"Logged out successfully\"}, status=status.HTTP_200_OK)\n    except Exception as e:\n        return Response({\"msg\": \"Invalid token\"}, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "delete_account",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def delete_account(request):\n    renderer_class = [userrenderer]\n    permission_classes = [IsAuthenticated]\n    try:\n        user = request.user\n        user.delete()\n        return Response(\n            {\"msg\": \"Account deleted successfully\"}, status=status.HTTP_200_OK\n        )\n    except Exception as e:",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "update_profil",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def update_profile (request):\n    renderer_class = [userrenderer]\n    permission_classes = [IsAuthenticated]\n    if  request.method == \"GET\":\n        serializer = serializers.updateuserprofileserializer(request.user)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    elif request.method == \"PUT\":\n        count =0\n        existing_data = serializers.updateuserprofileserializer(request.user).data\n        y=existing_data.values()",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "match.migrations.0001_initial",
        "description": "match.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = []\n    operations = [\n        migrations.CreateModel(\n            name=\"Match\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(",
        "detail": "match.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "match.migrations.0002_alter_match_date",
        "description": "match.migrations.0002_alter_match_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"match\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"match\",\n            name=\"date\",\n            field=models.DateField(),\n        ),",
        "detail": "match.migrations.0002_alter_match_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "match.migrations.0003_alter_match_name",
        "description": "match.migrations.0003_alter_match_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"match\", \"0002_alter_match_date\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"match\",\n            name=\"name\",\n            field=models.CharField(max_length=255, unique=True),\n        ),",
        "detail": "match.migrations.0003_alter_match_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "match.migrations.0004_match_no_tickets",
        "description": "match.migrations.0004_match_no_tickets",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"match\", \"0003_alter_match_name\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"match\",\n            name=\"no_tickets\",\n            field=models.IntegerField(default=0),\n        ),",
        "detail": "match.migrations.0004_match_no_tickets",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "match.migrations.0005_match_ticket_price",
        "description": "match.migrations.0005_match_ticket_price",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"match\", \"0004_match_no_tickets\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"match\",\n            name=\"ticket_price\",\n            field=models.DecimalField(decimal_places=2, default=0, max_digits=7),\n        ),",
        "detail": "match.migrations.0005_match_ticket_price",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "match.migrations.0006_match_avilable",
        "description": "match.migrations.0006_match_avilable",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"match\", \"0005_match_ticket_price\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"match\",\n            name=\"avilable\",\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "match.migrations.0006_match_avilable",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "match.migrations.0007_alter_match_avilable",
        "description": "match.migrations.0007_alter_match_avilable",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"match\", \"0006_match_avilable\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"match\",\n            name=\"avilable\",\n            field=models.BooleanField(default=True),\n        ),",
        "detail": "match.migrations.0007_alter_match_avilable",
        "documentation": {}
    },
    {
        "label": "MatchConfig",
        "kind": 6,
        "importPath": "match.apps",
        "description": "match.apps",
        "peekOfCode": "class MatchConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"match\"",
        "detail": "match.apps",
        "documentation": {}
    },
    {
        "label": "Match",
        "kind": 6,
        "importPath": "match.models",
        "description": "match.models",
        "peekOfCode": "class Match(models.Model):\n    # attributes\n    name = models.CharField(max_length=255, unique=True)\n    team1 = models.CharField(max_length=255)\n    team2 = models.CharField(max_length=255)\n    date = models.DateField(auto_now_add=False)\n    time = models.TimeField(auto_now_add=False)\n    stadium = models.CharField(max_length=255)\n    no_tickets =  models.IntegerField(default=0)\n    ticket_price = models.DecimalField(max_digits=7,decimal_places=2,default=0)",
        "detail": "match.models",
        "documentation": {}
    },
    {
        "label": "IsAuthOrReadOnly",
        "kind": 6,
        "importPath": "match.permissions",
        "description": "match.permissions",
        "peekOfCode": "class IsAuthOrReadOnly(permissions.BasePermission):\n    def has_permission(self, request, view, obj):\n        if request.method in permissions.SAFE_METHODS:\n            return True\n        return obj.username == request.user",
        "detail": "match.permissions",
        "documentation": {}
    },
    {
        "label": "userrenderer",
        "kind": 6,
        "importPath": "match.renderers",
        "description": "match.renderers",
        "peekOfCode": "class userrenderer(renderers.JSONRenderer):\n    charset = \"utf-8\"\n    def render(self, data, accepted_media_type=None, renderer_context=None):\n        response = \"\"\n        if \"ErrorDetail\" in str(data):\n            response = json.dumps({\"errors\": data})\n        else:\n            response = json.dumps(data)\n        return response",
        "detail": "match.renderers",
        "documentation": {}
    },
    {
        "label": "match",
        "kind": 6,
        "importPath": "match.serializers",
        "description": "match.serializers",
        "peekOfCode": "class match(serializers.ModelSerializer):\n    class Meta:\n        model = Match\n        fields = \"__all__\"\nclass search_match(serializers.ModelSerializer):\n    class Meta:\n        model = Match\n        fields = [\"name\", \"team1\", \"team2\"]",
        "detail": "match.serializers",
        "documentation": {}
    },
    {
        "label": "search_match",
        "kind": 6,
        "importPath": "match.serializers",
        "description": "match.serializers",
        "peekOfCode": "class search_match(serializers.ModelSerializer):\n    class Meta:\n        model = Match\n        fields = [\"name\", \"team1\", \"team2\"]",
        "detail": "match.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "match.urls",
        "description": "match.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"addnewmatch/\", views.addmatch, name=\"all_matches\"),\n    path(\"retrive_all_match/\", views.retrieve_all_match, name=\"retrive_all_match\"),\n    path(\"retriveonematch/<pk>/\", views.retrieve_one_match, name=\"retrive_one_match\"),\n    path(\"updatematch/<pk>/\", views.update_match, name=\"update_match\"),\n    path(\"deletematch/<pk>/\", views.deletematch, name=\"delete_match\"),\n    path(\"searchmatch/\", views.search_about_match, name=\"searchmatch\"),\n]",
        "detail": "match.urls",
        "documentation": {}
    },
    {
        "label": "addmatch",
        "kind": 2,
        "importPath": "match.views",
        "description": "match.views",
        "peekOfCode": "def addmatch(request):\n    if request.method == \"POST\":\n        renderer_class = [userrenderer]\n        permission_classes = [IsAuthenticated]\n        serializer = serializers.match(data=request.data)\n        if serializer.is_valid(raise_exception=True):\n            serializer.save()\n            return Response(\n                {\"msg\": \"added successfull\"}, status=status.HTTP_201_CREATED\n            )",
        "detail": "match.views",
        "documentation": {}
    },
    {
        "label": "retrieve_all_match",
        "kind": 2,
        "importPath": "match.views",
        "description": "match.views",
        "peekOfCode": "def retrieve_all_match(request):\n    if request.method == \"GET\":\n        renderer_class = [userrenderer]\n        permission_classes = [IsAuthenticated]\n        match = Match.objects.all()\n        serializer = serializers.match(match, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    return Response({\"msg\": \"not allowed\"}, status=status.HTTP_405_METHOD_NOT_ALLOWED)\n# ++++++++++++++++++++++++++++++++++++(retrive_one_match)+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n@api_view([\"GET\"])",
        "detail": "match.views",
        "documentation": {}
    },
    {
        "label": "retrieve_one_match",
        "kind": 2,
        "importPath": "match.views",
        "description": "match.views",
        "peekOfCode": "def retrieve_one_match(request, pk):\n    if request.method == \"GET\":\n        renderer_class = [userrenderer]\n        permission_classes = [IsAuthenticated]\n        try:\n            match = Match.objects.get(pk=pk)\n            serializer = serializers.match(match)\n            if match.no_tickets==0:\n                match.avilable =  False\n                return Response({\"msg\": \"This match is not available because all tickets have been sold out\"},",
        "detail": "match.views",
        "documentation": {}
    },
    {
        "label": "update_match",
        "kind": 2,
        "importPath": "match.views",
        "description": "match.views",
        "peekOfCode": "def update_match(request, pk):\n    if request.method == \"PATCH\":\n        renderer_class = [userrenderer]\n        permission_classes = [IsAuthenticated]\n        try:\n            match = Match.objects.get(pk=pk)\n            serializer = serializers.match(match, data=request.data)\n            if serializer.is_valid(raise_exception=True):\n                serializer.save()\n                return Response(",
        "detail": "match.views",
        "documentation": {}
    },
    {
        "label": "deletematch",
        "kind": 2,
        "importPath": "match.views",
        "description": "match.views",
        "peekOfCode": "def deletematch(request, pk):\n    if request.method == \"DELETE\":\n        try:\n            match = Match.objects.get(pk=pk)\n            match.delete()\n            return Response(\n                {\"msg\": \"deleted successfully\"}, status=status.HTTP_204_NO_CONTENT\n            )\n        except Match.DoesNotExist:\n            return Response(",
        "detail": "match.views",
        "documentation": {}
    },
    {
        "label": "search_about_match",
        "kind": 2,
        "importPath": "match.views",
        "description": "match.views",
        "peekOfCode": "def search_about_match(request, name=None, team1=None, team2=None):\n    if request.method == \"POST\":\n        renderer_class = [userrenderer]\n        permission_classes = [IsAuthenticated]\n        name = request.data.get(\"name\")\n        team1 = request.data.get(\"team1\")\n        team2 = request.data.get(\"team2\")\n        if name is None and team1 is None and team2 is None:\n            return Response(\n                {\"msg\": \"Name of match or name of any team are required for search\"},",
        "detail": "match.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "party.migrations.0001_initial",
        "description": "party.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Party',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),",
        "detail": "party.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "PartyConfig",
        "kind": 6,
        "importPath": "party.apps",
        "description": "party.apps",
        "peekOfCode": "class PartyConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'party'",
        "detail": "party.apps",
        "documentation": {}
    },
    {
        "label": "Party",
        "kind": 6,
        "importPath": "party.models",
        "description": "party.models",
        "peekOfCode": "class Party(models.Model):\n    name = models.CharField(max_length=100)\n    performer = models.CharField(max_length=100)\n    location = models.CharField(max_length=100)\n    datetime = models.DateTimeField()\n    number_of_tickets = models.IntegerField()\n    def __str__(self):\n        return self.name",
        "detail": "party.models",
        "documentation": {}
    },
    {
        "label": "IsAdminPermission",
        "kind": 6,
        "importPath": "party.permissions",
        "description": "party.permissions",
        "peekOfCode": "class IsAdminPermission(permissions.BasePermission):\n    def has_permission(self, request, view):\n        return request.user and request.user.is_authenticated and getattr(request.user, 'isadmin', True)",
        "detail": "party.permissions",
        "documentation": {}
    },
    {
        "label": "PartySerializer",
        "kind": 6,
        "importPath": "party.serializer",
        "description": "party.serializer",
        "peekOfCode": "class PartySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Party\n        fields = [\"id\", \"name\", \"performer\", \"location\", \"datetime\", \"number_of_tickets\"]",
        "detail": "party.serializer",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "party.urls",
        "description": "party.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.PartyListView.as_view(), name='party-list'),\n    path('create', views.PartyCreateView.as_view(), name='party-create'),\n    path('<int:pk>', views.PartyRetrieveView.as_view(), name='party-retrieve'),\n    path('<int:pk>/update', views.PartyUpdateView.as_view(), name='party-update'),\n    path('<int:pk>/delete', views.PartyDeleteView.as_view(), name='party-delete'),\n    path('search', views.PartySearchView.as_view(), name='party-search'),\n]",
        "detail": "party.urls",
        "documentation": {}
    },
    {
        "label": "PartyListView",
        "kind": 6,
        "importPath": "party.views",
        "description": "party.views",
        "peekOfCode": "class PartyListView(APIView):\n    authentication_classes = [JWTAuthentication]\n    permission_classes = [IsAuthenticated]\n    def get(self, request, *args, **kwargs):\n        parties = Party.objects.all()\n        serializer = PartySerializer(parties, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n# -------------------------------(Delete_Party)------------------------------------------------------\nclass PartyDeleteView(APIView):\n    authentication_classes = [JWTAuthentication]",
        "detail": "party.views",
        "documentation": {}
    },
    {
        "label": "PartyDeleteView",
        "kind": 6,
        "importPath": "party.views",
        "description": "party.views",
        "peekOfCode": "class PartyDeleteView(APIView):\n    authentication_classes = [JWTAuthentication]\n    permission_classes = [IsAdminPermission]\n    def delete(self, request, pk, *args, **kwargs):\n        party = get_object_or_404(Party, pk=pk)\n        party.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)    \n# -------------------------------(Create_Party)------------------------------------------------------\nclass PartyCreateView(APIView):\n    authentication_classes = [JWTAuthentication]",
        "detail": "party.views",
        "documentation": {}
    },
    {
        "label": "PartyCreateView",
        "kind": 6,
        "importPath": "party.views",
        "description": "party.views",
        "peekOfCode": "class PartyCreateView(APIView):\n    authentication_classes = [JWTAuthentication]\n    permission_classes = [IsAdminPermission]\n    def post(self, request, *args, **kwargs):\n        serializer = PartySerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n# -------------------------------(Retrieve_Party)------------------------------------------------------",
        "detail": "party.views",
        "documentation": {}
    },
    {
        "label": "PartyRetrieveView",
        "kind": 6,
        "importPath": "party.views",
        "description": "party.views",
        "peekOfCode": "class PartyRetrieveView(APIView):\n    authentication_classes = [JWTAuthentication]\n    permission_classes = [IsAdminPermission]\n    def get(self, request, pk, *args, **kwargs):\n        party = get_object_or_404(Party, pk=pk)\n        serializer = PartySerializer(party)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n# -------------------------------(Update_Party)------------------------------------------------------\nclass PartyUpdateView(APIView):\n    authentication_classes = [JWTAuthentication]",
        "detail": "party.views",
        "documentation": {}
    },
    {
        "label": "PartyUpdateView",
        "kind": 6,
        "importPath": "party.views",
        "description": "party.views",
        "peekOfCode": "class PartyUpdateView(APIView):\n    authentication_classes = [JWTAuthentication]\n    permission_classes = [IsAdminPermission]\n    def patch(self, request, pk, *args, **kwargs):\n        party = get_object_or_404(Party, pk=pk)\n        serializer = PartySerializer(party, data=request.data, partial=True)  # Partial update\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_200_OK)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "party.views",
        "documentation": {}
    },
    {
        "label": "PartySearchView",
        "kind": 6,
        "importPath": "party.views",
        "description": "party.views",
        "peekOfCode": "class PartySearchView(APIView):\n    authentication_classes = [JWTAuthentication]\n    permission_classes = [IsAdminPermission]\n    def get(self, request, *args, **kwargs):\n        search_query = request.query_params.get('name', '')\n        parties = Party.objects.filter(name__icontains=search_query)\n        serializer = PartySerializer(parties, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)",
        "detail": "party.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "post.migrations.0001_initial",
        "description": "post.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Blog',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "post.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "post.migrations.0002_post_delete_blog",
        "description": "post.migrations.0002_post_delete_blog",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('post', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Post',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "post.migrations.0002_post_delete_blog",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "post.migrations.0003_rename_author_post_author_id_post_author_name",
        "description": "post.migrations.0003_rename_author_post_author_id_post_author_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('post', '0002_post_delete_blog'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='post',\n            old_name='author',\n            new_name='author_id',\n        ),",
        "detail": "post.migrations.0003_rename_author_post_author_id_post_author_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "post.migrations.0004_post_image_post_likes_alter_post_author_id_and_more",
        "description": "post.migrations.0004_post_image_post_likes_alter_post_author_id_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('post', '0003_rename_author_post_author_id_post_author_name'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='post',\n            name='image',\n            field=models.ImageField(blank=True, default=0, null=True, upload_to=''),",
        "detail": "post.migrations.0004_post_image_post_likes_alter_post_author_id_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "post.migrations.0005_alter_post_author_name_alter_post_title",
        "description": "post.migrations.0005_alter_post_author_name_alter_post_title",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"post\", \"0004_post_image_post_likes_alter_post_author_id_and_more\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"post\",\n            name=\"author_name\",\n            field=models.CharField(max_length=255),\n        ),",
        "detail": "post.migrations.0005_alter_post_author_name_alter_post_title",
        "documentation": {}
    },
    {
        "label": "PostConfig",
        "kind": 6,
        "importPath": "post.apps",
        "description": "post.apps",
        "peekOfCode": "class PostConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'post'",
        "detail": "post.apps",
        "documentation": {}
    },
    {
        "label": "Pos",
        "kind": 6,
        "importPath": "post.models",
        "description": "post.models",
        "peekOfCode": "class Post (models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField ()\n    author_id = models.ForeignKey(User, related_name= \"Posts\", on_delete=models.CASCADE)\n    author_name = models.CharField(max_length=255)\n    created_at = models.DateTimeField(auto_now_add=True)  \n    image = models.ImageField(default=0 )\n    likes = models.ManyToManyField(User, related_name=\"liked_posts\", blank=True , default=False)\n    def __str__(self):\n        return self.title",
        "detail": "post.models",
        "documentation": {}
    },
    {
        "label": "IsAuthOrReadOnl",
        "kind": 6,
        "importPath": "post.permissions",
        "description": "post.permissions",
        "peekOfCode": "class IsAuthOrReadOnly (permissions.BasePermission):\n    def has_permission(self, request, view):\n        if request.method in permissions.SAFE_METHODS:\n            return True\n        return request.user and request.user.is_authenticated \n    def has_object_permission(self, request, view, obj):\n        if request.method in permissions.SAFE_METHODS:\n            return True\n        return obj.author == request.user",
        "detail": "post.permissions",
        "documentation": {}
    },
    {
        "label": "UserRenderer",
        "kind": 6,
        "importPath": "post.renderers",
        "description": "post.renderers",
        "peekOfCode": "class UserRenderer(renderers.JSONRenderer):\n    charset = 'utf-8'\n    def render(self, data, media_type=None, renderer_context=None):\n        response = ''\n        if 'ErrorDetail' in str(data):\n            response = json.dumps({'errors': data})\n        else:\n            response = json.dumps(data)\n        return response",
        "detail": "post.renderers",
        "documentation": {}
    },
    {
        "label": "PostSerializer",
        "kind": 6,
        "importPath": "post.serializers",
        "description": "post.serializers",
        "peekOfCode": "class PostSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Post\n        fields = ['id','title', 'content', 'author_id','author_name','created_at','image']\n    # if image is not provided, set it to default image\n    def validate(self, data):\n        if 'image' not in self.initial_data:\n            data['image'] = \"0\"\n        return data\nclass ShowPostSerializer(serializers.ModelSerializer):",
        "detail": "post.serializers",
        "documentation": {}
    },
    {
        "label": "ShowPostSerializer",
        "kind": 6,
        "importPath": "post.serializers",
        "description": "post.serializers",
        "peekOfCode": "class ShowPostSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Post\n        fields = ['id','title', 'content','author_name','created_at','image','likes']\nclass UpdatePostSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Post\n        fields = ['id','title', 'content','author_name','image']",
        "detail": "post.serializers",
        "documentation": {}
    },
    {
        "label": "UpdatePostSerializer",
        "kind": 6,
        "importPath": "post.serializers",
        "description": "post.serializers",
        "peekOfCode": "class UpdatePostSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Post\n        fields = ['id','title', 'content','author_name','image']",
        "detail": "post.serializers",
        "documentation": {}
    },
    {
        "label": "Util",
        "kind": 6,
        "importPath": "post.utils",
        "description": "post.utils",
        "peekOfCode": "class Util:\n    @staticmethod\n    def send_email(data):\n        email = EmailMessage(\n            subject=data['subject'],\n            body=data['body'],\n            from_email=settings.DEFAULT_FROM_EMAIL,\n            to=[data['to_email']]\n        )\n        try:",
        "detail": "post.utils",
        "documentation": {}
    },
    {
        "label": "CreatePosts",
        "kind": 6,
        "importPath": "post.views",
        "description": "post.views",
        "peekOfCode": "class CreatePosts(APIView):\n    renderer_classes = [UserRenderer]\n    permission_classes = [IsAuthOrReadOnly]\n    def post(self, request):\n        data = request.data.copy()\n        data['author_id'] = request.user.id\n        data['author_name'] = request.user.username\n        serializer = PostSerializer(data=data, context={\"request\": request})\n        if serializer.is_valid():\n            serializer.save()",
        "detail": "post.views",
        "documentation": {}
    },
    {
        "label": "ShowPosts",
        "kind": 6,
        "importPath": "post.views",
        "description": "post.views",
        "peekOfCode": "class ShowPosts(APIView):\n    renderer_classes = [UserRenderer]\n    permission_classes = [IsAuthOrReadOnly]\n    def get(self, request):\n        posts = Post.objects.all() \n        serializer = ShowPostSerializer(posts, many=True, context={\"request\": request})\n        return Response(serializer.data, status=status.HTTP_200_OK)\n# ----------------------(PostDetail)-------------------------------------------------\nclass PostDetail(APIView):\n    renderer_classes = [UserRenderer]",
        "detail": "post.views",
        "documentation": {}
    },
    {
        "label": "PostDetail",
        "kind": 6,
        "importPath": "post.views",
        "description": "post.views",
        "peekOfCode": "class PostDetail(APIView):\n    renderer_classes = [UserRenderer]\n    permission_classes = [IsAuthOrReadOnly]\n    def get_object(self, pk):\n        try:\n            return Post.objects.get(pk=pk)\n        except Post.DoesNotExist:\n            raise Http404\n    def get(self, request, pk):\n        post = self.get_object(pk) ",
        "detail": "post.views",
        "documentation": {}
    },
    {
        "label": "DoLike",
        "kind": 6,
        "importPath": "post.views",
        "description": "post.views",
        "peekOfCode": "class DoLike(APIView):\n    renderer_classes = [UserRenderer]\n    permission_classes = [IsAuthOrReadOnly]\n    def get_object(self, pk):\n        try:\n            return Post.objects.get(pk=pk)\n        except Post.DoesNotExist:\n            raise Http404\n    def post(self, request ,pk):\n        post = self.get_object(pk)",
        "detail": "post.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "reservation.migrations.0001_initial",
        "description": "reservation.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        (\"match\", \"0005_match_ticket_price\"),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"match_reservation\",\n            fields=[",
        "detail": "reservation.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "reservation.migrations.0002_delete_match_reservation",
        "description": "reservation.migrations.0002_delete_match_reservation",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"reservation\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name=\"match_reservation\",\n        ),\n    ]",
        "detail": "reservation.migrations.0002_delete_match_reservation",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "reservation.migrations.0003_initial",
        "description": "reservation.migrations.0003_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        (\"match\", \"0005_match_ticket_price\"),\n        (\"reservation\", \"0002_delete_match_reservation\"),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"match_reservation\",",
        "detail": "reservation.migrations.0003_initial",
        "documentation": {}
    },
    {
        "label": "ReservationsConfig",
        "kind": 6,
        "importPath": "reservation.apps",
        "description": "reservation.apps",
        "peekOfCode": "class ReservationsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"reservation\"",
        "detail": "reservation.apps",
        "documentation": {}
    },
    {
        "label": "match_reservatio",
        "kind": 6,
        "importPath": "reservation.models",
        "description": "reservation.models",
        "peekOfCode": "class match_reservation (models.Model):\n    match_id = models.ForeignKey(Match,on_delete = models.CASCADE)\n    user_id = models.ForeignKey(User,on_delete = models.CASCADE)\n    tickets_reserved = models.IntegerField()",
        "detail": "reservation.models",
        "documentation": {}
    },
    {
        "label": "IsAuthOrReadOnly",
        "kind": 6,
        "importPath": "reservation.permissions",
        "description": "reservation.permissions",
        "peekOfCode": "class IsAuthOrReadOnly(permissions.BasePermission):\n    def has_permission(self, request, view, obj):\n        if request.method in permissions.SAFE_METHODS:\n            return True\n        return obj.username == request.user",
        "detail": "reservation.permissions",
        "documentation": {}
    },
    {
        "label": "userrenderer",
        "kind": 6,
        "importPath": "reservation.renderers",
        "description": "reservation.renderers",
        "peekOfCode": "class userrenderer(renderers.JSONRenderer):\n    charset = \"utf-8\"\n    def render(self, data, accepted_media_type=None, renderer_context=None):\n        response = \"\"\n        if \"ErrorDetail\" in str(data):\n            response = json.dumps({\"errors\": data})\n        else:\n            response = json.dumps(data)\n        return response",
        "detail": "reservation.renderers",
        "documentation": {}
    },
    {
        "label": "bookmatchserialize",
        "kind": 6,
        "importPath": "reservation.serializers",
        "description": "reservation.serializers",
        "peekOfCode": "class bookmatchserializer (serializers.ModelSerializer):\n    # price =  serializers.defaultdict(max_digits=7,decimal_places=2)\n    class Meta:\n        model = match_reservation\n        fields = ['tickets_reserved']",
        "detail": "reservation.serializers",
        "documentation": {}
    },
    {
        "label": "book_matc",
        "kind": 2,
        "importPath": "reservation.views",
        "description": "reservation.views",
        "peekOfCode": "def book_match (request,pk):\n    renderer_classes= [userrenderer]\n    permission_classes = [IsAuthenticated]\n    try:\n        match_id = Match.objects.get(pk=pk)\n    except  Match.DoesNotExist:\n        return Response({\"error\": \"Match not found\"}, status=status.HTTP_404_NOT_FOUND)\n    if match_id.avilable == True:\n        serializer= serializers.bookmatchserializer(data = request.data)\n        if  serializer.is_valid():",
        "detail": "reservation.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "ticketaya.asgi",
        "description": "ticketaya.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "ticketaya.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \"django-insecure-udb)6_g5z5^_)ekm3eztu8xq33)^cb6-06qm2l23xrb)(dixrj\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "SECRET_KEY = \"django-insecure-udb)6_g5z5^_)ekm3eztu8xq33)^cb6-06qm2l23xrb)(dixrj\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"rest_framework\",",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"rest_framework\",\n    \"rest_framework_simplejwt\",\n    \"corsheaders\",",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\n        \"rest_framework_simplejwt.authentication.JWTAuthentication\",\n    )\n}\nMIDDLEWARE = [\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    \"http://127.0.0.1:8000\",\n]\nCORS_ALLOW_METHODS = (\n    \"DELETE\",\n    \"GET\",\n    \"OPTIONS\",\n    \"PATCH\",\n    \"POST\",\n    \"PUT\",",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_METHODS",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "CORS_ALLOW_METHODS = (\n    \"DELETE\",\n    \"GET\",\n    \"OPTIONS\",\n    \"PATCH\",\n    \"POST\",\n    \"PUT\",\n)\nCORS_ALLOW_ALL_ORIGINS = True\nROOT_URLCONF = \"ticketaya.urls\"",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\nROOT_URLCONF = \"ticketaya.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"templates\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "ROOT_URLCONF = \"ticketaya.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"templates\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"templates\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "WSGI_APPLICATION = \"ticketaya.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static\")\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"account/static\")]\n# List of directories where Django will look for additional static files",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static\")\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"account/static\")]\n# List of directories where Django will look for additional static files\nSTATICFILES_DIRS = [",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static\")\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"account/static\")]\n# List of directories where Django will look for additional static files\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),  # Your static files directory",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static\")\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"account/static\")]\n# List of directories where Django will look for additional static files\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),  # Your static files directory\n]",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static\")\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"account/static\")]\n# List of directories where Django will look for additional static files\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),  # Your static files directory\n]\n# Directory where collected static files will be placed for deployment\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, \"static\")\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"account/static\")]\n# List of directories where Django will look for additional static files\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),  # Your static files directory\n]\n# Directory where collected static files will be placed for deployment\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "STATICFILES_DIRS = [os.path.join(BASE_DIR, \"account/static\")]\n# List of directories where Django will look for additional static files\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),  # Your static files directory\n]\n# Directory where collected static files will be placed for deployment\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),  # Your static files directory\n]\n# Directory where collected static files will be placed for deployment\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# URL and directory for media files\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# URL and directory for media files\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\nMEDIA_URL = \"/media/\"\nSIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=5),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=15),",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# URL and directory for media files\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\nMEDIA_URL = \"/media/\"\nSIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=5),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=15),\n    \"ROTATE_REFRESH_TOKENS\": False,\n    \"BLACKLIST_AFTER_ROTATION\": True,\n    \"UPDATE_LAST_LOGIN\": False,",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\nMEDIA_URL = \"/media/\"\nSIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=5),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=15),\n    \"ROTATE_REFRESH_TOKENS\": False,\n    \"BLACKLIST_AFTER_ROTATION\": True,\n    \"UPDATE_LAST_LOGIN\": False,\n    \"ALGORITHM\": \"HS256\",\n    \"SIGNING_KEY\": settings.SECRET_KEY,",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "MEDIA_URL = \"/media/\"\nSIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=5),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=15),\n    \"ROTATE_REFRESH_TOKENS\": False,\n    \"BLACKLIST_AFTER_ROTATION\": True,\n    \"UPDATE_LAST_LOGIN\": False,\n    \"ALGORITHM\": \"HS256\",\n    \"SIGNING_KEY\": settings.SECRET_KEY,\n    \"VERIFYING_KEY\": \"\",",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=5),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=15),\n    \"ROTATE_REFRESH_TOKENS\": False,\n    \"BLACKLIST_AFTER_ROTATION\": True,\n    \"UPDATE_LAST_LOGIN\": False,\n    \"ALGORITHM\": \"HS256\",\n    \"SIGNING_KEY\": settings.SECRET_KEY,\n    \"VERIFYING_KEY\": \"\",\n    \"AUDIENCE\": None,",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "PASSWORD_RESET_TIMEOUT",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "PASSWORD_RESET_TIMEOUT = 900  # 900 sec = 15 min\n# email configuration\n# settings.py\n# EMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\n# EMAIL_HOST = \"smtp.gmail.com\"\n# EMAIL_PORT = 587\n# EMAIL_HOST_USER = \"yaraharby9@gmail.com\"\n# EMAIL_HOST_PASSWORD = \"nmri bbqg ynxj oieg\"\n# EMAIL_USE_TLS = True\n# EMAIL_USE_SSL = False",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "AUTH_USER_MODEL = \"account.User\"\nEMAIL_BACKEND ='django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT=587\nEMAIL_HOST_USER='mkinzy71@gmail.com' #da 2lly hb3t mno\nEMAIL_HOST_PASSWORD='bihm twtf otrd ndph' #da 2lly hb3t mno\nEMAIL_USE_TLS=True\nEMAIL_USE_SSL=False\n# EMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\n# EMAIL_HOST = \"smtp.gmail.com\"",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "ticketaya.settings",
        "description": "ticketaya.settings",
        "peekOfCode": "EMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT=587\nEMAIL_HOST_USER='mkinzy71@gmail.com' #da 2lly hb3t mno\nEMAIL_HOST_PASSWORD='bihm twtf otrd ndph' #da 2lly hb3t mno\nEMAIL_USE_TLS=True\nEMAIL_USE_SSL=False\n# EMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\n# EMAIL_HOST = \"smtp.gmail.com\"\n# EMAIL_PORT = 587\n# EMAIL_HOST_USER = \"mkinzy71@gmail.com\"  # da 2lly hb3t mno",
        "detail": "ticketaya.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "ticketaya.urls",
        "description": "ticketaya.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"api_auth/\", include(\"rest_framework.urls\")),\n    path(\"account/\", include(\"account.urls\")),\n    path(\"match/\", include(\"match.urls\")),\n    # Obtain a pair of access and refresh tokens\n    path(\"api/token/\", TokenObtainPairView.as_view(), name=\"token_obtain_pair\"),\n    # Use the refresh token to get a new access token\n    path(\"api/token/refresh/\", TokenRefreshView.as_view(), name=\"token_refresh\"),#url to get new access token by refresh token\n    path(\"api/logout/\", TokenBlacklistView.as_view(), name=\"token_blacklist\"),",
        "detail": "ticketaya.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "ticketaya.wsgi",
        "description": "ticketaya.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "ticketaya.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"ticketaya.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]